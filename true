import os
import argparse
import sys
import logging
from typing import List, Tuple, Set, Optional
from tqdm import tqdm

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def get_files_in_directory(
    directory: str,
    exclude_dirs: Optional[Set[str]] = None,
    exclude_extensions: Optional[Set[str]] = None
) -> List[Tuple[str, int]]:
    """
    Recursively get all files in a directory, excluding specified directories and file extensions.

    Args:
        directory (str): The directory to scan.
        exclude_dirs (Set[str], optional): Set of directory names to exclude. Defaults to None.
        exclude_extensions (Set[str], optional): Set of file extensions to exclude. Defaults to None.

    Returns:
        List[Tuple[str, int]]: A list of tuples containing file paths and their sizes.
    """
    exclude_dirs = exclude_dirs or set()
    exclude_extensions = exclude_extensions or set()
    
    files = []
    total_files = sum([len(files) for r, d, files in os.walk(directory)])
    
    with tqdm(total=total_files, desc="Scanning files", unit="file") as pbar:
        for root, dirs, filenames in os.walk(directory):
            dirs[:] = [d for d in dirs if d not in exclude_dirs]
            for filename in filenames:
                if not any(filename.endswith(ext) for ext in exclude_extensions):
                    file_path = os.path.join(root, filename)
                    file_size = os.path.getsize(file_path)
                    files.append((file_path, file_size))
                pbar.update(1)
    
    return files

def write_files_to_txt(
    files: List[Tuple[str, int]],
    output_file: str,
    sort_by_size: bool = False,
    verbose: bool = False
) -> None:
    """
    Write the list of files to a text file.

    Args:
        files (List[Tuple[str, int]]): List of tuples containing file paths and sizes.
        output_file (str): Name of the output file.
        sort_by_size (bool, optional): Whether to sort files by size. Defaults to False.
        verbose (bool, optional): Whether to include file sizes in the output. Defaults to False.
    """
    if sort_by_size:
        files.sort(key=lambda x: x[1], reverse=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        for file_path, file_size in files:
            if verbose:
                f.write(f"{file_path} ({human_readable_size(file_size)})\n")
            else:
                f.write(f"{file_path}\n")

def main() -> int:
    parser = argparse.ArgumentParser(description="List files in a directory and save to a text file.")
    parser.add_argument("directory", help="Directory to scan for files")
    parser.add_argument("-o", "--output", default="files_to_add.txt", help="Output file name")
    parser.add_argument("--exclude-dirs", nargs="*", help="Directories to exclude")
    parser.add_argument("--exclude-extensions", nargs="*", help="File extensions to exclude")
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output")
    parser.add_argument("-s", "--sort-by-size", action="store_true", help="Sort files by size (largest first)")
    args = parser.parse_args()

    try:
        logging.info(f"Scanning directory: {args.directory}")
        files_to_add = get_files_in_directory(
            args.directory, 
            exclude_dirs=set(args.exclude_dirs or []),
            exclude_extensions=set(args.exclude_extensions or [])
        )
        if files_to_add:
            logging.info(f"Writing {len(files_to_add)} files to {args.output}")
            write_files_to_txt(files_to_add, args.output, args.sort_by_size, args.verbose)
            logging.info(f"Added {len(files_to_add)} files from {args.directory}.")
            logging.info(f"File list written to {args.output}")
            if args.verbose:
                total_size = sum(file[1] for file in files_to_add)
                logging.info(f"Total size of files: {human_readable_size(total_size)}")
        else:
            logging.warning(f"No files found in {args.directory} directory.")
        return 0
    except FileNotFoundError:
        logging.error(f"Directory '{args.directory}' not found.")
        return 1
    except PermissionError:
        logging.error(f"Permission denied when accessing '{args.directory}'.")
        return 1
    except IOError as e:
        logging.error(f"Error writing to file: {e}")
        return 1
    except Exception as e:
        logging.exception(f"An unexpected error occurred: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
